{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport { history } from \"../../../history\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport axios from \"axios\";\nimport { config } from \"../../../authServices/firebase/firebaseConfig\"; // Init firebase if not already initialized\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nlet firebaseAuth = firebase.auth();\nconst base_url = \"http://localhost:2000\";\nexport const loginWithFB = () => {\n  return dispatch => {\n    let provider = new firebase.auth.FacebookAuthProvider();\n    provider.setCustomParameters({\n      display: \"popup\"\n    });\n    firebaseAuth.signInWithPopup(provider).then(result => {\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      let token = result.credential.accessToken,\n          // The signed-in user info.\n      user = result.user.email;\n      dispatch({\n        type: \"LOGIN_WITH_FB\",\n        payload: {\n          user,\n          token,\n          loggedInWith: \"firebase\"\n        }\n      });\n      if (user) history.push(\"/\");\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const loginWithTwitter = () => {\n  return dispatch => {\n    let provider = new firebase.auth.TwitterAuthProvider();\n    firebaseAuth.signInWithPopup(provider).then(function (result) {\n      let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL;\n      dispatch({\n        type: \"LOGIN_WITH_TWITTER\",\n        payload: {\n          user,\n          name,\n          photoUrl,\n          token,\n          loggedInWith: \"firebase\"\n        }\n      });\n      history.push(\"/\");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n};\nexport const loginWithGoogle = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GoogleAuthProvider();\n    firebaseAuth.signInWithPopup(provider).then(function (result) {\n      let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL;\n      dispatch({\n        type: \"LOGIN_WITH_GOOGLE\",\n        payload: {\n          email: user,\n          name: name,\n          photoUrl,\n          token,\n          loggedInWith: \"firebase\"\n        }\n      });\n      history.push(\"/\");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n};\nexport const loginWithGithub = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GithubAuthProvider();\n    firebaseAuth.signInWithPopup(provider).then(function (result) {\n      let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.additionalUserInfo.username,\n          photoUrl = result.user.photoURL;\n      dispatch({\n        type: \"LOGIN_WITH_GITHUB\",\n        payload: {\n          user,\n          name,\n          photoUrl,\n          token,\n          loggedInWith: \"firebase\"\n        }\n      });\n      history.push(\"/\");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n};\nexport const loginWithJWT = user => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGIN_WITH_JWT\",\n      payload: { ...user\n      }\n    });\n  };\n};\nexport const logoutWithJWT = () => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_WITH_JWT\",\n      payload: {}\n    });\n    history.push(\"/login\");\n  };\n};\nexport const logoutWithFirebase = user => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_WITH_FIREBASE\",\n      payload: {}\n    });\n    history.push(\"/login\");\n  };\n};\nexport const changeRole = role => {\n  return dispatch => dispatch({\n    type: \"CHANGE_ROLE\",\n    userRole: role\n  });\n};","map":{"version":3,"sources":["/Users/roy/Desktop/Projects/getFit-frontEnd/src/redux/actions/auth/loginActions.js"],"names":["firebase","history","axios","config","apps","length","initializeApp","firebaseAuth","auth","base_url","loginWithFB","dispatch","provider","FacebookAuthProvider","setCustomParameters","display","signInWithPopup","then","result","token","credential","accessToken","user","email","type","payload","loggedInWith","push","catch","error","console","log","loginWithTwitter","TwitterAuthProvider","name","displayName","photoUrl","photoURL","loginWithGoogle","GoogleAuthProvider","loginWithGithub","GithubAuthProvider","additionalUserInfo","username","loginWithJWT","logoutWithJWT","logoutWithFirebase","changeRole","role","userRole"],"mappings":"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","sourcesContent":["import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"\nimport \"firebase/auth\"\nimport \"firebase/database\"\nimport axios from \"axios\"\nimport { config } from \"../../../authServices/firebase/firebaseConfig\"\n\n// Init firebase if not already initialized\nif (!firebase.apps.length) {\n  firebase.initializeApp(config)\n}\n\nlet firebaseAuth = firebase.auth()\n\nconst base_url = \"http://localhost:2000\";\n\n\nexport const loginWithFB = () => {\n  return dispatch => {\n    let provider = new firebase.auth.FacebookAuthProvider()\n    provider.setCustomParameters({\n      display: \"popup\"\n    })\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(result => {\n        // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n        let token = result.credential.accessToken,\n          // The signed-in user info.\n          user = result.user.email\n        dispatch({\n          type: \"LOGIN_WITH_FB\",\n          payload: {\n            user,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        if (user) history.push(\"/\")\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithTwitter = () => {\n  return dispatch => {\n    let provider = new firebase.auth.TwitterAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL\n        dispatch({\n          type: \"LOGIN_WITH_TWITTER\",\n          payload: {\n            user,\n            name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithGoogle = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GoogleAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL\n        dispatch({\n          type: \"LOGIN_WITH_GOOGLE\",\n          payload: {\n            email: user,\n            name: name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithGithub = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GithubAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.additionalUserInfo.username,\n          photoUrl = result.user.photoURL\n\n        dispatch({\n          type: \"LOGIN_WITH_GITHUB\",\n          payload: {\n            user,\n            name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithJWT = user => {\n  return dispatch => {\n    dispatch({ type: \"LOGIN_WITH_JWT\", payload: {...user} })\n  }\n}\n\nexport const logoutWithJWT = () => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_JWT\", payload: {} })\n    history.push(\"/login\")\n  }\n}\n\nexport const logoutWithFirebase = user => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_FIREBASE\", payload: {} })\n    history.push(\"/login\")\n  }\n}\n\nexport const changeRole = role => {\n  return dispatch => dispatch({ type: \"CHANGE_ROLE\", userRole: role })\n}\n"]},"metadata":{},"sourceType":"module"}