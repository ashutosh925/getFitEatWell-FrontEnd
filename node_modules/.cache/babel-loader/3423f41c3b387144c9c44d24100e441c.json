{"ast":null,"code":"import*as firebase from\"firebase/app\";import{history}from\"../../../history\";import\"firebase/auth\";import\"firebase/database\";import axios from\"axios\";import{config}from\"../../../authServices/firebase/firebaseConfig\";// Init firebase if not already initialized\nif(!firebase.apps.length){firebase.initializeApp(config);}var firebaseAuth=firebase.auth();var base_url=\"http://localhost:2000\";export var signupWithFirebase=function signupWithFirebase(email,password,name){return function(dispatch){var userEmail=null,loggedIn=false;//  userName = null\nfirebaseAuth.createUserWithEmailAndPassword(email,password).then(function(result){firebaseAuth.onAuthStateChanged(function(user){result.user.updateProfile({displayName:name});if(user){userEmail=user.email;// let userName = user.displayName\nloggedIn=true;dispatch({type:\"SIGNUP_WITH_EMAIL\",payload:{email:userEmail,name:name,isSignedIn:loggedIn}});dispatch({type:\"LOGIN_WITH_EMAIL\",payload:{email:userEmail,name:name}});}});history.push(\"/\");}).catch(function(error){console.log(error.message);});};};export var signupWithJWT=function signupWithJWT(signupData){console.log(signupData);// return dispatch => {\n// }\nreturn signupData;};","map":{"version":3,"sources":["/Users/roy/Desktop/Projects/getFit-frontEnd/src/redux/actions/auth/registerActions.js"],"names":["firebase","history","axios","config","apps","length","initializeApp","firebaseAuth","auth","base_url","signupWithFirebase","email","password","name","dispatch","userEmail","loggedIn","createUserWithEmailAndPassword","then","result","onAuthStateChanged","user","updateProfile","displayName","type","payload","isSignedIn","push","catch","error","console","log","message","signupWithJWT","signupData"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,QAAZ,KAA0B,cAA1B,CACA,OAASC,OAAT,KAAwB,kBAAxB,CACA,MAAO,eAAP,CACA,MAAO,mBAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,KAAuB,+CAAvB,CAEA;AACA,GAAI,CAACH,QAAQ,CAACI,IAAT,CAAcC,MAAnB,CAA2B,CACzBL,QAAQ,CAACM,aAAT,CAAuBH,MAAvB,EACD,CAED,GAAII,CAAAA,YAAY,CAAGP,QAAQ,CAACQ,IAAT,EAAnB,CACA,GAAMC,CAAAA,QAAQ,CAAG,uBAAjB,CAEA,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAQC,QAAR,CAAkBC,IAAlB,CAA2B,CAC3D,MAAO,UAAAC,QAAQ,CAAI,CACjB,GAAIC,CAAAA,SAAS,CAAG,IAAhB,CACEC,QAAQ,CAAG,KADb,CAEE;AAEFT,YAAY,CACTU,8BADH,CACkCN,KADlC,CACyCC,QADzC,EAEGM,IAFH,CAEQ,SAAAC,MAAM,CAAI,CACdZ,YAAY,CAACa,kBAAb,CAAgC,SAAAC,IAAI,CAAI,CACtCF,MAAM,CAACE,IAAP,CAAYC,aAAZ,CAA0B,CACxBC,WAAW,CAAEV,IADW,CAA1B,EAGA,GAAIQ,IAAJ,CAAU,CACRN,SAAS,CAAGM,IAAI,CAACV,KAAjB,CACA;AACAK,QAAQ,CAAG,IAAX,CACAF,QAAQ,CAAC,CACPU,IAAI,CAAE,mBADC,CAEPC,OAAO,CAAE,CACPd,KAAK,CAAEI,SADA,CAEPF,IAAI,CAAJA,IAFO,CAGPa,UAAU,CAAEV,QAHL,CAFF,CAAD,CAAR,CAQAF,QAAQ,CAAC,CACPU,IAAI,CAAE,kBADC,CAEPC,OAAO,CAAE,CACPd,KAAK,CAAEI,SADA,CAEPF,IAAI,CAAJA,IAFO,CAFF,CAAD,CAAR,CAOD,CACF,CAxBD,EAyBAZ,OAAO,CAAC0B,IAAR,CAAa,GAAb,EACD,CA7BH,EA8BGC,KA9BH,CA8BS,SAAAC,KAAK,CAAI,CACdC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB,EACD,CAhCH,EAiCD,CAtCD,CAuCD,CAxCM,CA0CP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,UAAD,CAAgB,CAC3CJ,OAAO,CAACC,GAAR,CAAYG,UAAZ,EACA;AACA;AACA,MAAOA,CAAAA,UAAP,CACD,CALM","sourcesContent":["import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"\nimport \"firebase/auth\"\nimport \"firebase/database\"\nimport axios from \"axios\"\nimport { config } from \"../../../authServices/firebase/firebaseConfig\"\n\n// Init firebase if not already initialized\nif (!firebase.apps.length) {\n  firebase.initializeApp(config)\n}\n\nlet firebaseAuth = firebase.auth()\nconst base_url = \"http://localhost:2000\";\n\nexport const signupWithFirebase = (email, password, name) => {\n  return dispatch => {\n    let userEmail = null,\n      loggedIn = false\n      //  userName = null\n\n    firebaseAuth\n      .createUserWithEmailAndPassword(email, password)\n      .then(result => {\n        firebaseAuth.onAuthStateChanged(user => {\n          result.user.updateProfile({\n            displayName: name\n          })\n          if (user) {\n            userEmail = user.email\n            // let userName = user.displayName\n            loggedIn = true\n            dispatch({\n              type: \"SIGNUP_WITH_EMAIL\",\n              payload: {\n                email: userEmail,\n                name,\n                isSignedIn: loggedIn\n              }\n            })\n            dispatch({\n              type: \"LOGIN_WITH_EMAIL\",\n              payload: {\n                email: userEmail,\n                name\n              }\n            })\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(error => {\n        console.log(error.message)\n      })\n  }\n}\n\nexport const signupWithJWT = (signupData) => {\n  console.log(signupData);\n  // return dispatch => {\n  // }\n  return signupData;\n}\n"]},"metadata":{},"sourceType":"module"}