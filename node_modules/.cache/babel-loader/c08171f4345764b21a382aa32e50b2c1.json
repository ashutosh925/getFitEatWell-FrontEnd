{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport { history } from \"../../../history\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport axios from \"axios\";\nimport { config } from \"../../../authServices/firebase/firebaseConfig\"; // Init firebase if not already initialized\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nlet firebaseAuth = firebase.auth();\nexport const signupWithFirebase = (email, password, name) => {\n  return dispatch => {\n    let userEmail = null,\n        loggedIn = false; //  userName = null\n\n    firebaseAuth.createUserWithEmailAndPassword(email, password).then(result => {\n      firebaseAuth.onAuthStateChanged(user => {\n        result.user.updateProfile({\n          displayName: name\n        });\n\n        if (user) {\n          userEmail = user.email; // let userName = user.displayName\n\n          loggedIn = true;\n          dispatch({\n            type: \"SIGNUP_WITH_EMAIL\",\n            payload: {\n              email: userEmail,\n              name,\n              isSignedIn: loggedIn\n            }\n          });\n          dispatch({\n            type: \"LOGIN_WITH_EMAIL\",\n            payload: {\n              email: userEmail,\n              name\n            }\n          });\n        }\n      });\n      history.push(\"/\");\n    }).catch(error => {\n      console.log(error.message);\n    });\n  };\n};\nexport const signupWithJWT = (email, password, name) => {\n  console.log(email, password, name);\n  return dispatch => {\n    axios.post(\"/api/authenticate/register/user\", {\n      email: email,\n      password: password,\n      name: name\n    }).then(response => {\n      var loggedInUser;\n\n      if (response.data) {\n        console.log(response.data); // loggedInUser = response.data.user\n        // localStorage.setItem(\"token\", response.data.token)\n        // dispatch({\n        //   type: \"LOGIN_WITH_JWT\",\n        //   payload: { loggedInUser, loggedInWith: \"jwt\" }\n        // })\n\n        history.push(\"/\");\n      }\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/roy/Desktop/Projects/getFit-frontEnd/src/redux/actions/auth/registerActions.js"],"names":["firebase","history","axios","config","apps","length","initializeApp","firebaseAuth","auth","signupWithFirebase","email","password","name","dispatch","userEmail","loggedIn","createUserWithEmailAndPassword","then","result","onAuthStateChanged","user","updateProfile","displayName","type","payload","isSignedIn","push","catch","error","console","log","message","signupWithJWT","post","response","loggedInUser","data","err"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,+CAAvB,C,CAEA;;AACA,IAAI,CAACH,QAAQ,CAACI,IAAT,CAAcC,MAAnB,EAA2B;AACzBL,EAAAA,QAAQ,CAACM,aAAT,CAAuBH,MAAvB;AACD;;AAED,IAAII,YAAY,GAAGP,QAAQ,CAACQ,IAAT,EAAnB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAA2B;AAC3D,SAAOC,QAAQ,IAAI;AACjB,QAAIC,SAAS,GAAG,IAAhB;AAAA,QACEC,QAAQ,GAAG,KADb,CADiB,CAGf;;AAEFR,IAAAA,YAAY,CACTS,8BADH,CACkCN,KADlC,EACyCC,QADzC,EAEGM,IAFH,CAEQC,MAAM,IAAI;AACdX,MAAAA,YAAY,CAACY,kBAAb,CAAgCC,IAAI,IAAI;AACtCF,QAAAA,MAAM,CAACE,IAAP,CAAYC,aAAZ,CAA0B;AACxBC,UAAAA,WAAW,EAAEV;AADW,SAA1B;;AAGA,YAAIQ,IAAJ,EAAU;AACRN,UAAAA,SAAS,GAAGM,IAAI,CAACV,KAAjB,CADQ,CAER;;AACAK,UAAAA,QAAQ,GAAG,IAAX;AACAF,UAAAA,QAAQ,CAAC;AACPU,YAAAA,IAAI,EAAE,mBADC;AAEPC,YAAAA,OAAO,EAAE;AACPd,cAAAA,KAAK,EAAEI,SADA;AAEPF,cAAAA,IAFO;AAGPa,cAAAA,UAAU,EAAEV;AAHL;AAFF,WAAD,CAAR;AAQAF,UAAAA,QAAQ,CAAC;AACPU,YAAAA,IAAI,EAAE,kBADC;AAEPC,YAAAA,OAAO,EAAE;AACPd,cAAAA,KAAK,EAAEI,SADA;AAEPF,cAAAA;AAFO;AAFF,WAAD,CAAR;AAOD;AACF,OAxBD;AAyBAX,MAAAA,OAAO,CAACyB,IAAR,CAAa,GAAb;AACD,KA7BH,EA8BGC,KA9BH,CA8BSC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD,KAhCH;AAiCD,GAtCD;AAuCD,CAxCM;AA0CP,OAAO,MAAMC,aAAa,GAAG,CAACtB,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAA2B;AACtDiB,EAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAZ,EAAmBC,QAAnB,EAA6BC,IAA7B;AAEA,SAAOC,QAAQ,IAAI;AACjBX,IAAAA,KAAK,CACF+B,IADH,CACQ,iCADR,EAC2C;AACvCvB,MAAAA,KAAK,EAAEA,KADgC;AAEvCC,MAAAA,QAAQ,EAAEA,QAF6B;AAGvCC,MAAAA,IAAI,EAAEA;AAHiC,KAD3C,EAMGK,IANH,CAMQiB,QAAQ,IAAI;AAChB,UAAIC,YAAJ;;AAEA,UAAGD,QAAQ,CAACE,IAAZ,EAAiB;AAEfP,QAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACE,IAArB,EAFe,CAGf;AAEA;AAEA;AACA;AACA;AACA;;AAEAnC,QAAAA,OAAO,CAACyB,IAAR,CAAa,GAAb;AACD;AAEF,KAxBH,EAyBGC,KAzBH,CAyBSU,GAAG,IAAIR,OAAO,CAACC,GAAR,CAAYO,GAAZ,CAzBhB;AA2BD,GA5BD;AA6BD,CAhCM","sourcesContent":["import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"\nimport \"firebase/auth\"\nimport \"firebase/database\"\nimport axios from \"axios\"\nimport { config } from \"../../../authServices/firebase/firebaseConfig\"\n\n// Init firebase if not already initialized\nif (!firebase.apps.length) {\n  firebase.initializeApp(config)\n}\n\nlet firebaseAuth = firebase.auth()\n\nexport const signupWithFirebase = (email, password, name) => {\n  return dispatch => {\n    let userEmail = null,\n      loggedIn = false\n      //  userName = null\n\n    firebaseAuth\n      .createUserWithEmailAndPassword(email, password)\n      .then(result => {\n        firebaseAuth.onAuthStateChanged(user => {\n          result.user.updateProfile({\n            displayName: name\n          })\n          if (user) {\n            userEmail = user.email\n            // let userName = user.displayName\n            loggedIn = true\n            dispatch({\n              type: \"SIGNUP_WITH_EMAIL\",\n              payload: {\n                email: userEmail,\n                name,\n                isSignedIn: loggedIn\n              }\n            })\n            dispatch({\n              type: \"LOGIN_WITH_EMAIL\",\n              payload: {\n                email: userEmail,\n                name\n              }\n            })\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(error => {\n        console.log(error.message)\n      })\n  }\n}\n\nexport const signupWithJWT = (email, password, name) => {\n  console.log(email, password, name)\n\n  return dispatch => {\n    axios\n      .post(\"/api/authenticate/register/user\", {\n        email: email,\n        password: password,\n        name: name\n      })\n      .then(response => {\n        var loggedInUser\n\n        if(response.data){\n\n          console.log(response.data)\n          // loggedInUser = response.data.user\n          \n          // localStorage.setItem(\"token\", response.data.token)\n\n          // dispatch({\n          //   type: \"LOGIN_WITH_JWT\",\n          //   payload: { loggedInUser, loggedInWith: \"jwt\" }\n          // })\n\n          history.push(\"/\")\n        }\n\n      })\n      .catch(err => console.log(err))\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}